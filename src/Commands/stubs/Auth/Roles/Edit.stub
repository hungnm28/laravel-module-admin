<?php

namespace DumMyNamespace\Http\Livewire\Auth\Roles;

use App\Models\Permission;
use App\Models\Role;
use Hungnm28\LaravelModuleAdmin\Traits\WithAdminTrait;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Livewire\Component;

class Edit extends Component
{
    use WithAdminTrait;
    use AuthorizesRequests;

    public $name = '', $title = '', $permission_ids = [];

    protected function rules()
    {
        return [
            'name' => 'string|unique:roles,name,' . $this->record_id,
            'title' => 'string',

        ];
    }

    public function mount()
    {
        $data = Role::with("permissions")->findOrFail($this->record_id);
        $this->name = $data->name;
        $this->title = $data->title;
        $this->permission_ids = $data->permissions->pluck("id");
        $this->done = 3;
    }

    public function update()
    {
        $this->authorize("auth.roles");
        $this->validate();
        $data = Role::findOrFail($this->record_id);
        $data->fill([
            'name' => $this->name,
            'title' => $this->title,
        ]);
        if (!$data->clean) {
            $data->update();
        }
        $listPermission = Permission::find($this->permission_ids)->reduce(function ($rt, $item) {
            if ($item->parent_id > 0) {
                $rt[$item->parent_id] = $item->parent_id;
            }
            $rt[$item->id] = $item->id;
            return $rt;
        }, []);
        $data->resetPermissions(array_values($listPermission));

        session()->flash('success', 'Role successfully updated.');
        $this->redirectForm("admin.auth.roles", $data->id);
    }


    public function render()
    {
        $permissions = Permission::with("children")->whereParentId(0)->get();
        return view('DumMyComponent::livewire.auth.roles.edit', compact("permissions"))
            ->layout('DumMyComponent::layouts.master', ['title' => 'Auth Roles Edit']);
    }
}
